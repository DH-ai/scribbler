{
  "metadata": {
    "name": "Reinforcement Learning Example",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "<h1>Reinforcement Learning Example</h1>\n<p>This example uses Q value Algorithm to estimate the next best color it should present start with a random color slowly with user inputs it proceeds for better color which suits with grey  \n </p>",
      "status": "",
      "output": "<h1>Reinforcement Learning Example</h1>\n<p>This example uses Q value Algorithm to estimate the next best color it should present start with a random color slowly with user inputs it proceeds for better color which suits with grey  \n </p>",
      "type": "html"
    },
    {
      "code": "<style>\n        #outerBox {\n            position: relative;\n            width: 300px;\n            height: 300px;\n            background-color: lightgray;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n\n        #innerBox {\n            width: 100px;\n            height: 100px;\n            transition: background-color 0.5s ease;\n        }\n\n        #goodButton, #badButton {\n            margin: 10px;\n            padding: 5px;\n            cursor: pointer;\n\t\t  \tbackground-color:#fff6dc;\n\t\t  \tborder-color:black;\n        }\n    </style>\n<div id=\"outerBox\">\n        <div id=\"innerBox\"></div>\n</div>\n<button id=\"goodButton\" onclick=\"provideFeedback('good')\">Good</button>\n<button id=\"badButton\" onclick=\"provideFeedback('bad')\">Bad</button>",
      "status": "",
      "output": "<style>\n        #outerBox {\n            position: relative;\n            width: 300px;\n            height: 300px;\n            background-color: lightgray;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n\n        #innerBox {\n            width: 100px;\n            height: 100px;\n            transition: background-color 0.5s ease;\n        }\n\n        #goodButton, #badButton {\n            margin: 10px;\n            padding: 5px;\n            cursor: pointer;\n\t\t  \tbackground-color:#fff6dc;\n\t\t  \tborder-color:black;\n        }\n    </style>\n<div id=\"outerBox\">\n        <div id=\"innerBox\" style=\"background-color: rgb(86, 25, 193);\"></div>\n</div>\n<button id=\"goodButton\" onclick=\"provideFeedback('good')\">Good</button>\n<button id=\"badButton\" onclick=\"provideFeedback('bad')\">Bad</button>",
      "type": "html"
    },
    {
      "code": "outerBox = document.getElementById('outerBox');\ninnerBox = document.getElementById('innerBox');\ngoodButton = document.getElementById('goodButton');\nbadButton = document.getElementById('badButton');\n\nnumActions = 3; // Number of actions (color channels to adjust)\nlearningRate = 0.1;\ndiscountFactor = 0.9;\n\n\n\ngetRandomState = function () {\n  return [Math.floor(Math.random() * 256), Math.floor(Math.random() * 256), Math.floor(Math.random() * 256)];\n}\n\ninitializeQTable = function () {\n  return Array.from({ length: 256 }, () => Array.from({ length: 256 }, () => Array.from({ length: 256 }, () => Array(numActions).fill(0))));\n}\nstate = getRandomState(); // Initial state\nqTable = initializeQTable();\nchooseAction= function () {\n  return Math.floor(Math.random() * numActions); // Randomly choose an action (color channel to adjust)\n}\n\ntakeAction = function (action) {\n  const newState = [...state];\n\n  // Adjust the chosen color channel with a larger random range\n  newState[action] += Math.floor(Math.random() * 80 - 40); // Adjust color channel by a random amount\n\n  // Clip values to be within  = [0, 255]\n  newState[action] = Math.min(255, Math.max(0, newState[action]));\n\n  return newState;\n}\n\nprovideFeedback = function (feedback) {\n  const action = chooseAction();\n  const newState = takeAction(action);\n\n  // Calculate reward based on feedback\n  const reward = feedback === 'good' ? 1 : -1;\n\n  // Update Q-value using the Q-learning update rule\n  qTable[state[0]][state[1]][state[2]][action] += learningRate * (reward + discountFactor * Math.max(...qTable[newState[0]][newState[1]][newState[2]]) - qTable[state[0]][state[1]][state[2]][action]);\n\n  // Update state\n  state = newState;\n\n  // Update innerBox with the new color\n  innerBox.style.backgroundColor = `rgb(${state[0]}, ${state[1]}, ${state[2]})`;\n\n  // Update Q-values visualization\n  updateQValuesVisualization();\n}\n\nupdateQValuesVisualization = function () {\n  const qValues = qTable[state[0]][state[1]][state[2]];\n  show('Q-Values:', qValues);\n}",
      "status": "[15]<br><span style=\"font-size:8px\">3.035s<span></span></span>",
      "output": "function () {\n  const qValues = qTable[state[0]][state[1]][state[2]];\n  show('Q-Values:', qValues);\n} <br>Q-Values: [\n  0,\n  0,\n  0\n] <br>Q-Values: [\n  0,\n  0,\n  0\n] <br>Q-Values: [\n  0,\n  0,\n  0\n] <br>Q-Values: [\n  0,\n  0,\n  0\n] <br>Q-Values: [\n  0,\n  0,\n  0\n] <br>Q-Values: [\n  0,\n  0,\n  0\n] <br>Q-Values: [\n  0,\n  0,\n  0\n] <br>Q-Values: [\n  0,\n  0,\n  0\n] <br>Q-Values: [\n  0,\n  0,\n  0\n] <br>Q-Values: [\n  0,\n  0,\n  0\n] <br>Q-Values: [\n  0,\n  0,\n  0\n] <br>Q-Values: [\n  0,\n  0,\n  0\n] <br>Q-Values: [\n  0,\n  0,\n  0\n] <br>Q-Values: [\n  0,\n  0,\n  0\n] <br>Q-Values: [\n  0,\n  0,\n  0\n] <br>Q-Values: [\n  0,\n  0,\n  0\n] <br>Q-Values: [\n  0,\n  0,\n  0\n] <br>Q-Values: [\n  0,\n  0,\n  0\n] <br>Q-Values: [\n  0,\n  0,\n  0\n] <br>Q-Values: [\n  0,\n  0,\n  0\n] <br>",
      "type": "code"
    }
  ],
  "source": "https://github.com/gopi-suvanam/jsnb",
  "run_on_load": false
}